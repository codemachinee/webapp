import asyncio

from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import defer_call, info as session_info, run_async

MAX_MESSAGES_CNT = 200  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π

chat_msgs = []  # —Å–ø–∏—Å–æ–∫ —Ö—Ä–∞–Ω–Ω—è—â–∏–π –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
online_users = set()  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω—è—â–µ–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
true_password = None


# def t(eng, chinese):
#   """return English or Chinese text according to the user's browser language"""
#  return chinese if 'zh' in session_info.user_language else eng


async def refresh_msg(my_name):
    """send new message to current session"""
    global chat_msgs
    last_idx = len(chat_msgs)
    while True:
        await asyncio.sleep(0.5)
        for m in chat_msgs[last_idx:]:
            if m[0] != my_name:  # only refresh message that not sent by current user
                put_markdown('`%s`: %s' % m, sanitize=True, scope='msg-box')

        # remove expired message
        if len(chat_msgs) > MAX_MESSAGES_CNT:
            chat_msgs = chat_msgs[len(chat_msgs) // 2:]

        last_idx = len(chat_msgs)


async def main():
    global chat_msgs, true_password

    put_markdown("#üèÜ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–π —á–∞—Ç!üèÜ\n–î–∞–Ω–Ω—ã–π —á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
                 " –¥–ª—è —Å–∫–æ—Ä–µ–π—à–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
                 "\n created by hlapps")

    put_scrollable(put_scope('msg-box'), height=300, keep_bottom=True)  # –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    nickname = await input("–í–æ–π—Ç–∏ –≤ —á–∞—Ç", required=True, placeholder='–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è',  # –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
                           validate=lambda n: '–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' if n in online_users or n == 'üì¢' else None)
    if true_password is None:
        if nickname in ('sexmashine', 'admin', '—Å–µ–∫—Å–º–∞—à–∏–Ω–∞'):
            password = await input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', required=False, type='password', placeholder='–∑–∞–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å '
                                                                                                  '—Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞')
            true_password = password
        else:
            password = await input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', required=False, type='password',
                                   placeholder='–ø–∞—Ä–æ–ª—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, '
                                               '–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å')
        online_users.add(nickname)
        chat_msgs.append(('üì¢', '`%s` –≤–æ—à–µ–ª(–∞) –≤ —á–∞—Ç. %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω' % (nickname, len(online_users))))
        put_markdown('`üì¢`: `%s` –≤–æ—à–µ–ª(–∞) –≤ —á–∞—Ç. %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω' % (nickname, len(online_users)),
                     sanitize=True,
                     scope='msg-box')
    else:
        password = await input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', required=False, type='password', placeholder='–ø–∞—Ä–æ–ª—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, '
                                                                                              '–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å',
                               validate=lambda m: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' if m != true_password else None)
        online_users.add(nickname)  # –∏–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–Ω–ª–∞–π–Ω —Å–ø–∏—Å–æ–∫
        chat_msgs.append(('üì¢', '`%s` –≤–æ—à–µ–ª(–∞) –≤ —á–∞—Ç. %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω' % (nickname, len(online_users))))
        put_markdown('`üì¢`: `%s` –≤–æ—à–µ–ª(–∞) –≤ —á–∞—Ç. %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω' % (nickname, len(online_users)), sanitize=True,
                     scope='msg-box')

    @defer_call
    def on_close():
        online_users.remove(nickname)
        chat_msgs.append(('üì¢', '`%s` –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç. %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω' % (nickname, len(online_users))))

    refresh_task = run_async(refresh_msg(nickname))

    while True:
        data = await input_group('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', [
            textarea(name='msg', help_text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'),
            #input(name='msg'),
            actions(name='cmd', buttons=['–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                         {'label': '–í—ã—Ö–æ–¥', 'type': 'cancel'}])
        ], validate=lambda d: ('msg', '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') if d['cmd'] == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' and not d[
            'msg'] else None)
        if data is None:
            break
        put_markdown('`%s`: %s' % (nickname, data['msg']), sanitize=True, scope='msg-box')
        chat_msgs.append((nickname, data['msg']))

    refresh_task.close()
    toast("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç")


if __name__ == '__main__':
    start_server(main, debug=True, port=80, remote_access=True)
